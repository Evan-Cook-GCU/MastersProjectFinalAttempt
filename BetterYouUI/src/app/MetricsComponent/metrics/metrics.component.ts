import { Component } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { ButtonModule } from 'primeng/button';
import { CalendarModule } from 'primeng/calendar';
import { InputTextModule } from 'primeng/inputtext';
import { TableModule } from 'primeng/table';
import { MetricData } from '../../Models/Models';
import { MetricDataService } from '../../services/MetricDataService/MetricDataService';

@Component({
  selector: 'app-metrics',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, TableModule, ButtonModule, InputTextModule, CalendarModule],
  templateUrl: './metrics.component.html',
  styleUrl: './metrics.component.scss'
})
export class MetricsComponent {
  metricForm: FormGroup;
  entries: MetricData[] = [];
  metric1Label: string = 'Metric 1';
  metric2Label: string = 'Metric 2';

  constructor(private fb: FormBuilder, private dataService: MetricDataService) {
    this.metricForm = this.fb.group({
      metric1: ['', Validators.required],
      metric2: ['', Validators.required],
      date: ['', Validators.required],
      metric1Label: ['Metric 1'],
      metric2Label: ['Metric 2']
    });

    this.metricForm.get('metric1Label')?.valueChanges.subscribe(value => {
      this.metric1Label = value;
      this.dataService.updateMetric1Label(value);
    });

    this.metricForm.get('metric2Label')?.valueChanges.subscribe(value => {
      this.metric2Label = value;
      this.dataService.updateMetric2Label(value);
    });
  }

  addEntry(): void {
    const newEntry: MetricData = {
      metricDataId: 0, // This would be generated by the backend
      userMetricId: 1, // Set appropriately
      dataValue: {
        metric1: this.metricForm.value.metric1,
        metric2: this.metricForm.value.metric2
      },
      dataDate: new Date(this.metricForm.value.date)
    };
    this.entries.push(newEntry);
    this.entries.sort((a, b) => a.dataDate.getTime() - b.dataDate.getTime());
    this.dataService.updateMetricData(this.entries);
    this.metricForm.reset();
  }

  removeEntry(index: number): void {
    this.entries.splice(index, 1);
    this.dataService.updateMetricData(this.entries);
  }

  onSubmit(): void {
    if (this.entries.length > 0) {
      console.log(this.entries);
    }
  }
}
